(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
  typeof define === 'function' && define.amd ? define(factory) :
  (global.Stockpile = factory());
}(this, (function () { 'use strict';

var stockpile = function stockpile(namespace) {
  var toObject = JSON.parse;
  var toString = JSON.stringify;

  var store = window.localStorage;
  var cache = toObject(store.getItem(namespace)) || {};

  return {
    get: get,
    set: set,
    remove: remove,
    clear: clear,
    exists: exists
  };

  // helpers

  function update() {
    store.setItem(namespace, toString(cache));
  }

  // API

  function get(name) {
    return cache[name] || null;
  }

  function set(name, value) {
    cache[name] = value;
    update();
  }

  function remove(name) {
    delete cache[name];
    update();
  }

  function clear() {
    store.removeItem(namespace);
  }

  function exists(name) {
    return get(name) !== null;
  }
};

return stockpile;

})));
