/**
 * Breakpoints are accessed using
 * the break() function below.
 *
 * i.e. break(m) // returns 48em
 */
$breakpoints: (
  s: 500,
  m: 800,
  l: 1100
) !default;

/**
 * Convert a given value to ems
 */
@function em($value) {
  @if ($value/1) == $value {
    @if (unit($value) == 'px') {
      $unitless_value: $value/1px;
      @return ($unitless_value/16)*1em;
    } @else if (unit($value) == 'pt') {
      $unitless_value: $value/1pt;
      @return ($unitless_value/16)*1em;
    } @else {
      @return ($value/16)*1em;
    }
  }
  @warn "em(#{$value}) is not a number.";
  @return null;
}

/**
 * Generate a breakpoint for the given key, 
 * and min/max-width flag
 *
 * min-width example:
 *   @media (min-width: break(m)){}
 *
 * max-width example:
 *   @media (max-width: break(m, false)){}
 */
@function break($breakpoint, $min-width: true) {
  @if map-has-key($breakpoints, $breakpoint) {
    @if ($min-width == false) {
      @return em(map-get($breakpoints, $breakpoint) - 1);
    } @else {
      @return em(map-get($breakpoints, $breakpoint));
    }
  } @else {
    @if ($min-width == false) {
      @return em($breakpoint - 1)
    } @else {
      @return em($breakpoint)
    }
  }
  @warn "Bad value (#{$breakpoint}) in function break(#{$breakpoint}).";
  @return 'Check your break() declaration.';
}
